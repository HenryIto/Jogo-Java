// quando iniciamos este gameThread ele chama automaticamente esse metodo run
	@Override
	um exemplo de loop
	public void run() {
		
		é 1 segundo mas convertido em 1 bilhão de nanosegundos para ficar mais precisso
		0.016666 por segundo
		double drawInterval = 1000000000/FPS;
		o nanoTime retorna a hora atual do sistema
		nextDrawTime faz com que o prossimo desenho sera o tempo atual mais o intervalo que seria 0.016666 
		double nextDrawTime = System.nanoTime() + drawInterval;
		
		enquanto este gameThread existir ele vai ficar executando o que ta dentro do while
		while(gameThread != null) {
			
			update ele atualiza a posição do personagem
			update();
			
			repaint desenha a tela com a informação atualizada
			em vez de escrever paintComponent para chamar a função
			voce escreve repaint
			repaint();
			
			
			try {
				retorna quanto tempo resta até o proximo desenho
				double remainingTime = nextDrawTime -  System.nanoTime();
				como o sleep não aceita nanosegundos tem que converter para milisegundos
				remainingTime = remainingTime/1000000;
				
				se o update e o repaint levou mais tempo que o drawInterval entao não há tempo restante
				entao esse thread nao precisa dormir(sleep)
				if (remainingTime < 0) {
					remainingTime = 0;
				}
				esse sleep pausa o loop do jogo para que não faça nada até que o tempo do sleep termine
				Thread.sleep((long) remainingTime);
				
				o nextDrawTime sera 0.016666
				nextDrawTime += drawInterval;
			} catch (InterruptedException e) {
				TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
----------------------------------
OLD GET PLAYER IMAGE

public void getPlayerImage() {
	try {
		// ImageIO.read carrega uma imagem que esta dentro do arquivo
		// getClass().getResourceAsStream("/Player/boy_up_1.png") retorna um objeto 'InputStream' que representa o fluxo de bytes da imagem 'boy_up_1.png'
		// getClass() retorna o objeto Class para a classe em que esse código está sendo executado
		// getResourceAsStream() é um método dessa classe que permite obter um fluxo de bytes para um recurso no mesmo diretório ou pacote da classe.
		// ImageIO.read() lê o fluxo de bytes da imagem e retorna um objeto BufferedImage que representa a imagem carregada. 
		// Portanto, essa linha de código carrega a imagem "boy_up_1.png" e retorna um objeto BufferedImage contendo essa imagem.
		up1 = ImageIO.read(getClass().getResourceAsStream("/Player/boy_up_1.png"));
		up2 = ImageIO.read(getClass().getResourceAsStream("/Player/boy_up_2.png"));
		down1 = ImageIO.read(getClass().getResourceAsStream("/Player/boy_down_1.png"));
		down2 = ImageIO.read(getClass().getResourceAsStream("/Player/boy_down_2.png"));
		left1 = ImageIO.read(getClass().getResourceAsStream("/Player/boy_left_1.png"));
		left2 = ImageIO.read(getClass().getResourceAsStream("/Player/boy_left_2.png"));
		right1 = ImageIO.read(getClass().getResourceAsStream("/Player/boy_right_1.png"));
		right2 = ImageIO.read(getClass().getResourceAsStream("/Player/boy_right_2.png"));
	} catch (Exception e) {
		e.printStackTrace();
	}
}

/*
 * switch(direction) { case "up": if(spriteNum == 1) { image = up1; }
 * if(spriteNum == 2) { image = up2; } break; case "down": if(spriteNum == 1) {
 * image = down1; } if(spriteNum == 2) { image = down2; } break; case "left":
 * if(spriteNum == 1) { image = left1; } if(spriteNum == 2) { image = left2; }
 * break; case "right": if(spriteNum == 1) { image = right1; } if(spriteNum ==
 * 2) { image = right2; } break; }
 */
 
 ---------------------------------------
 PLAYER AS A SQUARE
/*
 * g2.setColor(Color.white);
 * // desenha um quadrado e preeche com a cor branca
 * (int x, int y, int widht, int height) g2.fillRect(X, Y, gp.tileSize, gp.tileSize);
 */
 --------------------------------------------